package com.waldhauser.tasklist.domain.model;

import jakarta.persistence.*;

import java.util.UUID;

/**
 * The Task class represents an individual task within a task list.
 * It is a persistent entity mapped to the "tasks" database table.
 * Each task is associated with a specific task list and has metadata
 * including its owner, name, and description.
 * <p>
 * This class is designed to work as part of a task management system where
 * users can manage tasks within structured task lists.
 * <p>
 * Key attributes:
 * - id: The unique identifier for the task, generated by the database.
 * - ownerId: The identifier of the user who owns the task.
 * - tasklist: The task list to which the task belongs.
 * - name: The name or title of the task.
 * - description: A more detailed explanation or additional information about the task.
 * <p>
 * Relationships:
 * - Many tasks can belong to a single Tasklist, representing a many-to-one relationship.
 *   This ensures that tasks are logically tied to a specific task list within the system.
 * <p>
 * Usage consideration:
 * - The id field is generated by the database automatically and should not be manually set.
 * - The tasklist association must be valid and non-null to ensure that the task belongs to a
 *   specific task list.
 */
@Entity
@Table(name = "tasks")
public class Task {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    // this is jakarta import and generated value UUID bc database sets it
    private UUID id;

    @Column(unique = false, nullable = false)
    private UUID ownerId;

    // this sucks, but has to be this way to be tied to the tasklist entity
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "tasklist_id", nullable = false)
    private Tasklist tasklist;

    @Column(unique = false, nullable = false)
    private String name;

    @Column(unique = false, nullable = false)
    private String description;

    public Task() {
    }

    /**
     * Constructs a new Task instance with the specified parameters.
     *
     * @param id the unique identifier for the task
     * @param ownerId the unique identifier of the user who owns the task
     * @param tasklist the task list to which this task belongs
     * @param name the name or title of the task
     * @param description a detailed description of the task
     */
    public Task(UUID id, UUID ownerId, Tasklist tasklist, String name, String description) {
        this.id = id;
        this.ownerId = ownerId;
        this.tasklist = tasklist;
        this.name = name;
        this.description = description;
    }

    /**
     * Constructs a new Task with the specified task list, owner, name, and description.
     *
     * @param tasklist the task list to which this task belongs
     * @param ownerId the unique identifier of the user who owns the task
     * @param name the name or title of the task
     * @param description a detailed description of the task
     */
    public Task(Tasklist tasklist, UUID ownerId, String name, String description) {
        this.tasklist = tasklist;
        this.ownerId = ownerId;
        this.name = name;
        this.description = description;
    }

    /**
     * Retrieves the unique identifier for this task.
     *
     * @return the unique identifier of the task as a UUID
     */
    public UUID getId() {
        return id;
    }

    /**
     * Sets the unique identifier for this task.
     *
     * @param id the unique identifier to be assigned to the task
     */
    public void setId(UUID id) {
        this.id = id;
    }

    /**
     * Retrieves the unique identifier of the user who owns this task.
     *
     * @return the owner's unique identifier as a UUID
     */
    public UUID getOwnerId() {
        return ownerId;
    }

    /**
     * Assigns the unique identifier of the user who owns this task.
     *
     * @param ownerId the unique identifier of the task owner
     */
    public void setOwnerId(UUID ownerId) {
        this.ownerId = ownerId;
    }

    /**
     * Retrieves the task list associated with this task.
     *
     * @return the task list to which this task belongs
     */
    public Tasklist getTasklist() {
        return tasklist;
    }

    /**
     * Sets the task list associated with this task.
     *
     * @param tasklist the task list to which this task belongs
     */
    public void setTasklist(Tasklist tasklist) {
        this.tasklist = tasklist;
    }

    /**
     * Retrieves the name or title of the task.
     *
     * @return the name of the task as a String
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name or title of the task.
     *
     * @param name the name to be assigned to the task
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Retrieves the description of the task.
     *
     * @return the description of the task as a String
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the description of the task.
     *
     * @param description the description to be assigned to the task
     */
    public void setDescription(String description) {
        this.description = description;
    }
}
